<?php

namespace tas\social\models;

use app\models\CustomerInfo;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "conversations".
 *
 * @property integer                  $conversation_id
 * @property string                   $sender_id
 * @property string                   $sender_name
 * @property string                   $receiver_id
 * @property string                   $receiver_name
 * @property integer                  $type
 * @property integer                  $message_count
 * @property integer                  $unread_count
 * @property integer                  $created_at
 * @property integer                  $updated_at
 *
 * @property ConversationDetail[]     $details
 * @property string                   $typeDisplay
 * @property int                      $id_customer
 * @property \app\models\CustomerInfo $customer
 */
class Conversation extends ActiveRecord
{
    const TYPE_FACEBOOK = 1;
    const TYPE_VIBER    = 2;
    const TYPE_ZALO     = 3;
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'conversations';
    }
    
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['type','message_count','unread_count','created_at','updated_at'],'integer'],
            [['sender_id','sender_name','receiver_id','receiver_name'],'string','max' => 255],
            ['unread_count','default','value' => 1],
        ];
    }
    
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'conversation_id' => Yii::t('app','Conversation ID'),
            'sender_id'       => Yii::t('app','Sender ID'),
            'sender_name'     => Yii::t('app','Sender Name'),
            'receiver_id'     => Yii::t('app','Receiver ID'),
            'receiver_name'   => Yii::t('app','Receiver Name'),
            'type'            => Yii::t('app','Type'),
            'message_count'   => Yii::t('app','Message Count'),
            'unread_count'    => Yii::t('app','Unread Count'),
            'created_at'      => Yii::t('app','Created At'),
            'updated_at'      => Yii::t('app','Updated At'),
        ];
    }
    
    public function getDetails()
    {
        return $this->hasMany(ConversationDetail::className(),['conversation_id' => 'conversation_id']);
    }
    
    public function behaviors()
    {
        return [
            [
                'class'      => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at'],
                ],
            ],
        ];
    }
    
    public function save($runValidation = true,$attributeNames = null)
    {
        $this->updated_at = time();
        
        return parent::save($runValidation,$attributeNames); // TODO: Change the autogenerated stub
    }
    
    public function getTypeDisplay()
    {
        switch ($this->type) {
            case self::TYPE_FACEBOOK:
                return 'F';
                break;
            case self::TYPE_VIBER:
                return 'V';
                break;
            case self::TYPE_ZALO:
                return 'Z';
                break;
        }
    }
    
    public function getCustomer()
    {
        return $this->hasOne(CustomerInfo::class,['Pid' => 'id_customer']);
    }
    
    public function fields()
    {
        return [
            'conversation_id',
            'sender_id',
            'sender_name',
            'type',
            'message_count',
            'unread_count',
            'updated_at'    => function ($model){
                return Yii::$app->formatter->asDate($model->updated_at);
            },
            'created_at'    => function ($model){
                return Yii::$app->formatter->asDate($model->created_at);
            },
            'id_customer',
            'customer_name' => function ($model){
                return $model->customer !== null ? $model->customer->fullName : '';
            },
        ];
    }
}
